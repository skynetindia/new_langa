<?php
	/* This day used for date add/minuser of particular day */
	$GLOBALS['datedays'] = 10;
	/*This function is used to store the log details of login user */
	function storelogs($userID,$logs){
		DB::table('member_activity_log')->insert(array(
					'user_id' => $userID,
					'logs' => $logs,
					'ip_address' => \Request::ip(),
					'log_date' => date('Y-m-d H:i:s') //

		));
	}
	/* iswriteper is used to check the write permision(add/edit/delete) */
	function checkpermission($module, $sub_id, $read_write,$iswriteper = 'false') {
		if($iswriteper != 'false'){
			$request = parse_url($_SERVER['REQUEST_URI']);
			$path = ($_SERVER['HTTP_HOST'] == 'localhost') ? rtrim(str_replace('/easylangaw/', '', $request["path"]), '/') : $request["path"];
			/*$result = rtrim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');*/			
			$result = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');
			$current_module = DB::select('select * from modulo where TRIM(BOTH "/" FROM modulo_link) = :link', ['link' => $result]);  			
					/*DB::enableQueryLog();
					$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);*/
			if(empty($current_module)){
				$path = URL::previous();	
				$path = ($_SERVER['HTTP_HOST'] == 'localhost') ? rtrim(str_replace('http://'.$_SERVER['HTTP_HOST'].'/easylangaw/', '', $path), '/') : $path;				
//				$result = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');			
				$result = trim(str_replace('http://'.$_SERVER['HTTP_HOST'], '', $path), '/');				
				$current_module = DB::select('select * from modulo where TRIM(BOTH "/" FROM modulo_link) = :link', ['link' => $result]);  			
					/*DB::enableQueryLog();
					$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);*/
			}			
			$module = (isset($current_module[0]->modulo_sub)) ? $current_module[0]->modulo_sub : 1;	
			$sub_id = (isset($current_module[0]->id)) ? $current_module[0]->id : 12;			
		}
        //$this->module = (isset($current_module[0]->modulo_sub)) ? $current_module[0]->modulo_sub : 1;
        //$this->sub_id = (isset($current_module[0]->id)) ? $current_module[0]->id : 12;

		$user_id = Auth::user()->id;
		$user_permission = Auth::user()->permessi;
        $permission = json_decode($user_permission);		
       
        if($user_id == 0) {        	
        	return true;
        } 
        else if($user_permission != "null" && $permission != null) {        	
			$check = in_array($module.'|'.$sub_id.'|'.$read_write, $permission);
			if($check){				
				return true;
			} else {
				return false;
			}
		} else {			
			return false;
		}
	}


	function getLocationInfoByIp($IPAddress = null){
		if($IPAddress == null){
			$client  = @$_SERVER['HTTP_CLIENT_IP'];
			$forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];
			$remote  = @$_SERVER['REMOTE_ADDR'];
			$result  = array('country'=>'', 'city'=>'');
			if(filter_var($client, FILTER_VALIDATE_IP)){
				$ip = $client;
			}elseif(filter_var($forward, FILTER_VALIDATE_IP)){
				$ip = $forward;
			}else{
				$ip = $remote;		
			}
			$IPAddress = $ip;
		}
		$ip_data = @json_decode(file_get_contents("http://www.geoplugin.net/json.gp?ip=".$IPAddress));    
		if($ip_data && $ip_data->geoplugin_countryName != null){
			$result['country_code'] = $ip_data->geoplugin_countryCode;
			$result['country'] = $ip_data->geoplugin_countryName;
			$result['city'] = $ip_data->geoplugin_city;
		}
		$result['country'] = !empty($result['country']) ? $result['country'] : 'italy';
		$result['city'] = !empty($result['city']) ? $result['city'] : 'milan';
		return @$result;	
	}	

	/* Here Create the unique function that used anywhere in site */
	function replace_charcter($replaceValue = array(),$content) {
		$htmlcontent = $content;
		foreach($replaceValue as $key => $val){
			$htmlcontent = str_replace($key,$val,$htmlcontent);	
		}
		return $htmlcontent;
		/*$htmlcontent = str_replace('[#SPLASHPAGE_TITLE#]',$memberdata->title,$memberdata->content);	
		echo $htmlcontent*/
	}

	function dateFormate($date,$formate = 'd/m/Y'){
		/*
		$date = str_replace('/', '-', $date);
		$formate = ($formate == null) ? $arrMainSettings['timeformate'] : $formate;*/
		$newDate = date($formate,strtotime($date));	
		return $newDate;
	}
	function wordformate($word){
		return ucwords(strtolower($word));
	}
	function stringformate($word){
		return ucfirst(strtolower($word));
	}

	/* This function is used to logo and that settings */
	function adminSettings() {
		  $arrSettings = DB::table('admin_settings')->first();
		  return $arrSettings;
	}
	

	/* This function is used to display breadcrumbs */
	function getbreadcrumbs() {
		$request = parse_url($_SERVER['REQUEST_URI']);
		$path = ($_SERVER['HTTP_HOST'] == 'localhost') ? rtrim(str_replace('/easylangaw/', '', $request["path"]), '/') : $request["path"];		
		$result = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');		

		$breadcrumbsArray = array();
		if(!empty($result)){
			$moduldetails = DB::select('select * from modulo where TRIM(BOTH "/" FROM modulo_link) = :link', ['link' => $result]);		
		}

		$parentid = isset($moduldetails[0]->modulo_sub) ? $moduldetails[0]->modulo_sub : null;
		$link = isset($moduldetails[0]->modulo_link) ? $moduldetails[0]->modulo_link : '';
		$phase_key = isset($moduldetails[0]->phase_key) ? $moduldetails[0]->phase_key : null;
		$arrParentmodules[] = array('0'=>$phase_key,'1'=>$link);
		//$arrParentmodules = array();

		while($parentid != null) {
			$parentwhere = array('id'=>$parentid);
			$parenmoduldetails = DB::table('modulo')->select('*')->where($parentwhere)->first();
			$linkperant = isset($parenmoduldetails->modulo_link) ? $parenmoduldetails->modulo_link : '';
			$arrParentmodules[] = array('0'=>$parenmoduldetails->phase_key,'1'=>$linkperant); 
			$parentid = $parenmoduldetails->modulo_sub;			
		}
		$breadcrumbs = "";
		$arrBreadcrumbsArray = $arrParentmodules;		
		if(empty($arrParentmodules[0]) || empty($arrParentmodules[0][0])) {			
			$arrBreadcrumbsArray = staticbreadcrumbs($path);								
		} 		
		if(!empty($arrBreadcrumbsArray)){			
			$breadcrumbs = "<ol class='breadcrumb'>";
			foreach(array_reverse($arrBreadcrumbsArray) as $key => $val){
				//$breadcrumbs .= '<li class="breadcrumb-item">'.trans('messages.'.$val).'</li>'; 
				if(is_array($val)){					
					$breadcrumbs .= ($val[1] != null) ? '<li class="breadcrumb-item"><a href="'.url($val[1]).'">'.trans('messages.'.$val[0]).'</a></li>' : '<li class="breadcrumb-item">'.trans('messages.'.$val[0]).'</li>';					
				}
				else {
					$breadcrumbs .= '<li class="breadcrumb-item">'.trans('messages.'.$val).'</li>'; 
				}
			}
			$breadcrumbs .="</ol>";		
		}		
		return $breadcrumbs;
	}


	function staticbreadcrumbs($path) {

		$c = explode('/',$path);
		$last = explode('/', end($c));		
		
		$path = preg_replace('/[0-9]+/', '', $path);
		$key = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');							

		/*$arrBreadcrumbs['url_key'] = array('CHILD PAGE Language KEY','PAREND PAGE LANGUAGE');*/
		$arrBreadcrumbs['enti/modify/corporation'] = array('keyword_modify',array('0'=>'keyword_entity','1'=>'enti/myenti'));
		$arrBreadcrumbs['enti/add'] = array('keyword_add',array('0'=>'keyword_entity','1'=>'enti/myenti'));
		$arrBreadcrumbs['estimates/modify/quote'] = array('keyword_modify',array('0'=>'keyword_quotes','1'=>'estimates/my'));
		$arrBreadcrumbs['estimates/add'] = array('keyword_add',array('0'=>'keyword_quotes','1'=>'estimates/my'));
		$arrBreadcrumbs['progetti/modify/project'] = array('keyword_modify',array('0'=>'keyword_projects','1'=>'progetti/miei'));
		$arrBreadcrumbs['progetti/add'] = array('keyword_add',array('0'=>'keyword_projects','1'=>'progetti/miei'));
		$arrBreadcrumbs['pagamenti/mostra/accounting'] = array('keyword_invoices',array('0'=>'keyword_groupings','1'=>'pagamenti'),array('0'=>'keyword_accounting','1'=>'pagamenti'));
		$arrBreadcrumbs['pagamenti/tranche/add'] = array('keyword_add',array('0'=>'keyword_invoices','1'=>'pagamenti/tranche/elenco'),array('0'=>'keyword_accounting','1'=>'pagamenti/tranche/elenco'));
		$arrBreadcrumbs['pagamenti/tranche/modifica'] = array('keyword_modify',array('0'=>'keyword_invoices','1'=>'pagamenti/tranche/elenco'),array('0'=>'keyword_accounting','1'=>'pagamenti/tranche/elenco'));		
		$arrBreadcrumbs['costi/modify'] = array('keyword_modify',array('0'=>'keyword_costs','1'=>'statistiche/economiche'),array('0'=>'keyword_statistics','1'=>'statistiche/economiche'));

		/* =================================================== Admin ===================================== */
		$arrBreadcrumbs['admin/modify/utente'] = array('keyword_add',array('0'=>'keyword_users','1'=>'admin/utenti'),array('0'=>'keyword_role_capabilities','1'=>'admin/utenti'));
		$arrBreadcrumbs['role-permessi'] = array('keyword_add',array('0'=>'keyword_permission','1'=>'utente-permessi'),'keyword_role_capabilities');
		$arrBreadcrumbs['admin/tassonomie/pacchetti/add'] = array('keyword_add',array('0'=>'keyword_packages','1'=>'admin/tassonomie/pacchetti'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/tassonomie/modify/pacchetto'] = array('keyword_modify',array('0'=>'keyword_packages','1'=>'admin/tassonomie/pacchetti'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/taxonomies/optional/add'] = array('keyword_add',array('0'=>'keyword_optional','1'=>'admin/taxonomies/optional'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/taxonomies/modify/optional'] = array('keyword_modify',array('0'=>'keyword_optional','1'=>'admin/taxonomies/optional'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/tassonomie/dipartimenti/add'] = array('keyword_add',array('0'=>'keyword_department','1'=>'admin/tassonomie/dipartimenti'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/tassonomie/dipartimenti/modify/department'] = array('keyword_modify',array('0'=>'keyword_department','1'=>'admin/tassonomie/dipartimenti'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['taxation/add'] = array('keyword_add',array('0'=>'keyword_taxation','1'=>'taxation'),'keyword_sale','keyword_taxonomies');	
		$arrBreadcrumbs['admin/notification'] = array('keyword_add',array('0'=>'keyword_notifications','1'=>'admin/shownotification'),'keyword_notifications');	
		$arrBreadcrumbs['notification/detail'] = array('keyword_entelist',array('0'=>'keyword_notifications','1'=>'admin/shownotification'),'keyword_notifications');	
		$arrBreadcrumbs['admin/modify/quizpaackage'] = array('keyword_add',array('0'=>'keyword_quiz_pacchetto','1'=>'admin/quizpackage'),'keyword_quiz');	
		$arrBreadcrumbs['admin/modify/language'] = array('keyword_add',array('0'=>'keyword_languages','1'=>'admin/language'),array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');	
		$arrBreadcrumbs['admin/add/languagetranslation'] = array('keyword_add',array('0'=>'keyword_language_phase','1'=>'admin/languagetranslation/1'),array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');	
		$arrBreadcrumbs['menu/add'] = array('keyword_add',array('0'=>'keyword_menu','1'=>'admin/menu'),'keyword_settings');	
		$arrBreadcrumbs['menu/modify'] = array('keyword_modify',array('0'=>'keyword_menu','1'=>'admin/menu'),'keyword_settings');	
		$arrBreadcrumbs['admin/modify/page'] = array('keyword_add',array('0'=>'keyword_list_pages','1'=>'admin/pages'),'keyword_settings');	
		
		
		/*Below for the same url for add/edit, so that check the edit url with numerics */
		if(is_numeric($last[0])){
			$arrBreadcrumbs['admin/modify/utente'] = array('keyword_modify',array('0'=>'keyword_users','1'=>'admin/utenti'),array('0'=>'keyword_role_capabilities','1'=>'admin/utenti'));			
			$arrBreadcrumbs['role-permessi'] = array('keyword_modify',array('0'=>'keyword_permission','1'=>'utente-permessi'),'keyword_role_capabilities');
			$arrBreadcrumbs['taxation/add'] = array('keyword_modify',array('0'=>'keyword_taxation','1'=>'taxation'),'keyword_sale','keyword_taxonomies');
			$arrBreadcrumbs['admin/notification'] = array('keyword_modify',array('0'=>'keyword_notifications','1'=>'admin/shownotification'),'keyword_notifications');	
			$arrBreadcrumbs['admin/modify/quizpaackage'] = array('keyword_modify',array('0'=>'keyword_quiz_pacchetto','1'=>'admin/quizpackage'),'keyword_quiz');	
			$arrBreadcrumbs['admin/modify/language'] = array('keyword_modify',array('0'=>'keyword_languages','1'=>'admin/language'),array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');
			$arrBreadcrumbs['admin/languagetranslation'] = array('keyword_language_phase',array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');	
			$arrBreadcrumbs['admin/modify/languagetranslation'] = array('keyword_modify', array('0'=>'keyword_language_phase','1'=>'admin/languagetranslation/1'),array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');	
			$arrBreadcrumbs['calendario'] = array('keyword_deadline',array('0'=>'keyword_calendar','1'=>'calendario/0'));
			$arrBreadcrumbs['admin/modify/page'] = array('keyword_modify',array('0'=>'keyword_list_pages','1'=>'admin/pages'),'keyword_settings');	
			$arrBreadcrumbs['admin/loginactivity/user'] = array('keyword_member_activity',array('0'=>'keyword_login_activity','1'=>'admin/loginactivity/user'));	

			
		}
		return isset($arrBreadcrumbs[$key]) ? $arrBreadcrumbs[$key] : array();
	}
	
	/* This function is used to list of all module for dashboard drag and drop */
	function getModules() {
		DB::connection()->enableQueryLog();
		//$arrid = "'1', '2', '3', '4', '6', '9', '21', '27','67'";
		$arrid = "'1', '2', '3', '4','21'";	
		$arrModules = DB::select(DB::raw("select * from modulo where id NOT IN (select module_id from dashboard_widgets where user_type = ".Auth::user()->dipartimento.") AND id IN($arrid)"));
		/*$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);                
                    exit;
			$arrModules = DB::table('modulo')
					->select('modulo.*')					
					->Join('dashboard_widgets', 'dashboard_widgets.module_id', '=', 'modulo.id', 'left outer')
					->where(['modulo.type'=>1])->whereNull('dashboard_widgets.module_id')
					->where('dashboard_widgets.user_type', "!=", Auth::user()->dipartimento)->whereIn('modulo.id',$arrid)->get();
		*/			
		return $arrModules;
	}

	
	/* This function is used to Get the current widget base on login user type */
	function getWidgets() {
		$arrWidgets = DB::table('dashboard_widgets')->where('user_type',Auth::user()->dipartimento)->get();
		$arrModuleIds= array();
		foreach ($arrWidgets as $key => $value) {
			$arrModuleIds[] = $value->module_id;
		}
		return $arrModuleIds;
	}
	
	function ticketprobelm($role='client'){		
		$role = DB::table('ruolo_utente')->where('nome_ruolo', $role)->first();
		if( Auth::user()->dipartimento == $role->ruolo_id){
			return "<button class='btn btn-warning' type='button' id='problem' name='problem' title='".trans('messages.keyword_problem')."' onclick='problem()'>".trans('messages.keyword_problem')."</button>";
		} else {
			return false;
		}
	}
	function check_participant()
	{
		
		$participant=DB::table('enti_partecipanti')->where('id_user',Auth::user()->id)->get();
		$entiarr=[];
		foreach($participant as $partci){
			
			$entiarr[]=$partci->id_ente;
		}
		return $entiarr;
	}
	
	function check_media($id)
	{
		$imageurl=[1=>"projects", 3 =>"invoice", 0=>"quote", 4=>"quiz"];
		$filedetail=DB::table('media_files')->where('id',$id)->first();
		$social=DB::table('social')->get();
		$url=url('social/share/'.$id);
		$title=$filedetail->title;
		$description=$filedetail->description;
		$image_url=url('storage/app/images/'.$imageurl[$filedetail->master_type]."/".$filedetail->name);
		$newval=[];
		foreach($social as $soc)
		{
			$soc->url=str_replace('$url',"$url",$soc->url);
			$soc->url=str_replace('$title',"$title",$soc->url);
			$soc->url=str_replace('$description',"$description",$soc->url);
			$soc->url=str_replace('$image_url',"$image_url",$soc->url);
			$newval[]=$soc;
		}
		return $newval;
	}

	/* This function is used to find grow up percentage from the last weeks		
	 */

	function getLastCostPercentage($year='',$lastmonth='1'){
		$year = ($year=='') ? date('Y') : $year;
		$expenses = array();
		for($i = 1; $i <= 12; $i++) {
            if($i < 10)
                $i = '0' . $i;
            $timestamp=strtotime('1-'.$i.'-'.$year);
            $expense = DB::table('costi')
            ->selectRaw("sum(costo) as cost")
            ->whereBetween('datainserimento',[date('Y-m-01',$timestamp),date('Y-m-t',$timestamp)])
            ->first();      
            $expenses[] =  ($expense->cost!=null)?$expense->cost:0;            
        }
        $total = array_sum($expenses);        
        $lastrequired = array_reverse($expenses);
        $lastExpens = array_slice($lastrequired,$lastmonth);
        $lastExpens = array_sum($lastExpens);        
        $total = ($total == 0) ? 1 : $total;
        $percentChange = ($total == 0) ? 0 : ((1 - $lastExpens / $total) * 100);		 
		return number_format($percentChange);
	}


	function getLastRevenuePercentage($year='',$lastmonth='1'){
		$year = ($year=='') ? date('Y') : $year;
		$revenues = array();
		 for($i = 1; $i <= 12; $i++) {
            if($i < 10)
                $i = '0' . $i;
	        $timestamp = strtotime('1-'.$i.'-'.$year);
	        $revenue = DB::table('tranche')
	        ->Join('users', 'users.id', '=', 'tranche.user_id')
	        ->selectRaw("sum(imponibile) as cost,dipartimento ")
	        ->where('privato', 0)
	        /*->where('dipartimento', 2)*/
	        ->whereBetween('datainserimento',[date('Y-m-01',$timestamp),date('Y-m-t',$timestamp)])
	        ->groupBy('dipartimento')
	        ->get();
	        $totrevn=0; 
	        foreach($revenue as $revkey=>$revval){
	            if($revval->dipartimento==2)
	            $totrevn-=$revval->cost;
	            else
	            $totrevn+=$revval->cost;
	        }
	        $revenues[] =  $totrevn;            
        }

        $total = array_sum($revenues);

        $lastrequired = array_reverse($revenues);
        $lastExpens = array_slice($lastrequired,$lastmonth);
        $lastExpens = array_sum($lastExpens);        
        //$total = ($total == 0) ? 1 : $total;
        $percentChange = ($total == 0) ? 0 : ((1 - $lastExpens / $total) * 100);		 
		return number_format($percentChange);
	}

	function getLastProfitPercentage($year='',$lastmonth='1'){
		$year = ($year=='') ? date('Y') : $year;
		$revenupercentag = getLastRevenuePercentage($year,$lastmonth);
		$costpercentag = getLastCostPercentage($year,$lastmonth);
		return number_format($revenupercentag + $costpercentag);
	}

	function confirmPercentage($year='', $lastmonth="1", $startDate = '0', $endDate ='0') {        
	 	$year = ($year=='') ? date('Y') : $year;
        $startMonth =  1;
        $endMonth = 12;
        
        if($year == '0' && $startDate != '0' && $endDate !='0') {            
            $startMonth = date("m",strtotime($startDate));
            $endMonth = date("m",strtotime($endDate));                       
            $startYear = date("Y",strtotime($startDate));
            $endYear = date("Y",strtotime($endDate));
            $totalmonth = (($endYear - $startYear) * 12) + ($endMonth - $startMonth);
            /*$endMonth = ($totalmonth > 12) ? $totalmonth : 12;
            $startMonth = ($totalmonth > 12) ? $startMonth : 1;*/
        }
        else {
             $startYear = $year;
             $endYear = $year;
        }

        $totalYear = ($endYear - $startYear);

        for($y = $startYear; $y <= $endYear; $y++) {
            $endmonth = ($y == $endYear) ? $endMonth : 12;
            $startmonth = ($y == $startYear) ? $startMonth : 01;

            /* Get the Year wise data */
            if($totalYear > 2){                           
                    /*$timestamp = ($year != 0) ? strtotime('1-'.$i.'-'.$year) : strtotime('1-'.$i.'-'.$y);            
                    $timestamp =   
                    $last_day = date('01-01-Y', strtotime('-1-'.$y));
                    $last_day = date('31-12-Y', strtotime('1-1-'.$y));*/
                    
                    $arrbetween = array(date('Y-01-01',strtotime('1-1-'.$y)),date('Y-12-31',strtotime('1-1-'.$y))); 

                    DB::connection()->enableQueryLog();
                    $preventivi = DB::table('quotes')
                    ->selectRaw("sum(quotes.totale) as confirmamount")
                    ->join('statipreventivi', 'quotes.id', '=', 'statipreventivi.id_preventivo')
                    ->join('statiemotivipreventivi', 'statiemotivipreventivi.id', '=', 'statipreventivi.id_tipo')
                    ->where(function($query) {
                        $query->where('quotes.user_id', '=', Auth::user()->id)
                            ->orWhere('quotes.idutente', '=', Auth::user()->id);
                    })->where('statiemotivipreventivi.id', '6')
                    ->whereBetween('statipreventivi.created_at',$arrbetween)
                    ->where('quotes.is_deleted', 0)->first();                  
                    
                    /*$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);                
                    /*exit;*/

                    $confirm[] =  ($preventivi->confirmamount!=null)?$preventivi->confirmamount:0;               
            }
            else {
                for($i = $startmonth; $i <= $endmonth; $i++) {
                    /*if($i < 10)
                        $i = '0' . $i;*/                
                    $timestamp = ($year != 0) ? strtotime('1-'.$i.'-'.$year) : strtotime('1-'.$i.'-'.$y);            
                    $arrbetween = array(date('Y-m-01',$timestamp),date('Y-m-t',$timestamp)); 

                    DB::connection()->enableQueryLog();
                    $preventivi = DB::table('quotes')
                    ->selectRaw("sum(quotes.totale) as confirmamount")
                    ->join('statipreventivi', 'quotes.id', '=', 'statipreventivi.id_preventivo')
                    ->join('statiemotivipreventivi', 'statiemotivipreventivi.id', '=', 'statipreventivi.id_tipo')
                    ->where(function($query) {
                        $query->where('quotes.user_id', '=', Auth::user()->id)
                            ->orWhere('quotes.idutente', '=', Auth::user()->id);
                    })->where('statiemotivipreventivi.id', '6')
                    ->whereBetween('statipreventivi.created_at',$arrbetween)
                    ->where('quotes.is_deleted', 0)->first();          
                    // $query = DB::getQueryLog();
                    // $lastQuery = end($query);
        
                    // dd($preventivi);
                    /*$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);                
                    /*exit;*/
                    $confirm[] =  ($preventivi->confirmamount!=null)?$preventivi->confirmamount:0;
                }
            }
        }
            $total = array_sum($confirm);        
	        $lastrequired = array_reverse($confirm);
	        $lastExpens = array_slice($lastrequired,$lastmonth);
	        $lastExpens = array_sum($lastExpens);        
	        $total = ($total == 0) ? 1 : $total;
	        $percentChange = ($total == 0) ? 0 : ((1 - $lastExpens / $total) * 100);		 
			return number_format($percentChange);
    }
    function pendingConfirmPercentage($year,$lastmonth="1", $startDate = '0', $endDate ='0')
    {
    	$year = ($year=='') ? date('Y') : $year;
        $startMonth =  1;
        $endMonth = 12;
        if($year == '0' && $startDate != '0' && $endDate !='0') {
              $startMonth = date("m",strtotime($startDate));
              $endMonth = date("m",strtotime($endDate));
              $startYear = date("Y",strtotime($startDate));
              $endYear = date("Y",strtotime($endDate));
              $totalmonth = (($endYear - $startYear) * 12) + ($endMonth - $startMonth);
              /*$endMonth = ($totalmonth > 12) ? $totalmonth : 12;
              $startMonth = ($totalmonth > 12) ? $startMonth : 1;*/
        } 
        else {
             $startYear = $year;
             $endYear = $year;
        }  
        $totalYear = ($endYear - $startYear);  

        for($y = $startYear; $y <= $endYear; $y++) {
            $endmonth = ($y == $endYear) ? $endMonth : 12;                         
            $startmonth = ($y == $startYear) ? $startMonth : 01;  
            if($totalYear > 2){                                                                  
                    $arrbetween = array(date('Y-01-01',strtotime('1-1-'.$y)),date('Y-12-31',strtotime('1-1-'.$y))); 

                    DB::connection()->enableQueryLog();
                    $preventivi = DB::table('quotes')
                    ->selectRaw("sum(quotes.totale) as confirmamount")
                    ->join('statipreventivi', 'quotes.id', '=', 'statipreventivi.id_preventivo')
                    ->join('statiemotivipreventivi', 'statiemotivipreventivi.id', '=', 'statipreventivi.id_tipo')
                    ->where(function($query) {
                        $query->where('quotes.user_id', '=', Auth::user()->id)
                            ->orWhere('quotes.idutente', '=', Auth::user()->id);
                    })->where('statiemotivipreventivi.id', '9')
                    ->whereBetween('statipreventivi.created_at',$arrbetween)
                    ->where('quotes.is_deleted', 0)->first();                  
                     /*$queries = DB::getQueryLog();
                        $last_query = end($queries);
                        print_r($last_query);                
                        exit;*/
                    $pendingconfirm[] =  ($preventivi->confirmamount!=null)?$preventivi->confirmamount:0;                
            }
            else {
                for($i = $startmonth; $i <= $endmonth; $i++) {
                    /*if($i < 10)
                        $i = '0' . $i;
                    $timestamp=strtotime('1-'.$i.'-'.$year);
                     $arrbetween = ($year != 0) ? array(date('Y-m-01',$timestamp),date('Y-m-t',$timestamp)) : array(date('Y-m-d',strtotime($startDate)),date('Y-m-d',strtotime($endDate)));   */
                    $timestamp = ($year != 0) ? strtotime('1-'.$i.'-'.$year) : strtotime('1-'.$i.'-'.$y);            
                    $arrbetween = array(date('Y-m-01',$timestamp),date('Y-m-t',$timestamp)); 

                    DB::connection()->enableQueryLog();
                    $preventivi = DB::table('quotes')
                    ->selectRaw("sum(quotes.totale) as confirmamount")
                    ->join('statipreventivi', 'quotes.id', '=', 'statipreventivi.id_preventivo')
                    ->join('statiemotivipreventivi', 'statiemotivipreventivi.id', '=', 'statipreventivi.id_tipo')
                    ->where(function($query) {
                        $query->where('quotes.user_id', '=', Auth::user()->id)
                            ->orWhere('quotes.idutente', '=', Auth::user()->id);
                    })->where('statiemotivipreventivi.id', '9')
                    ->whereBetween('statipreventivi.created_at',$arrbetween)
                    ->where('quotes.is_deleted', 0)->first();                  
                     /*$queries = DB::getQueryLog();
                        $last_query = end($queries);
                        print_r($last_query);                
                        exit;*/
                    $pendingconfirm[] =  ($preventivi->confirmamount!=null)?$preventivi->confirmamount:0;
                }


            } 
        }  
            $total = array_sum($pendingconfirm);        
	        $lastrequired = array_reverse($pendingconfirm);
	        $lastExpens = array_slice($lastrequired,$lastmonth);
	        $lastExpens = array_sum($lastExpens);        
	        $total = ($total == 0) ? 1 : $total;
	        $percentChange = ($total == 0) ? 0 : ((1 - $lastExpens / $total) * 100);		 
			return number_format($percentChange);     
    }
    function notConfirmPercentage($year,$lastmonth="1", $startDate = '0', $endDate ='0') {               
    	$year = ($year=='') ? date('Y') : $year;
        $startMonth =  1;
        $endMonth = 12;
        if($year == '0' && $startDate != '0' && $endDate !='0') {
              $startMonth = date("m",strtotime($startDate));
              $endMonth = date("m",strtotime($endDate));
              $startYear = date("Y",strtotime($startDate));
              $endYear = date("Y",strtotime($endDate));
              $totalmonth = (($endYear - $startYear) * 12) + ($endMonth - $startMonth);
              /*$endMonth = ($totalmonth > 12) ? $totalmonth : 12;
              $startMonth = ($totalmonth > 12) ? $startMonth : 1;*/
        }  
        else {
             $startYear = $year;
             $endYear = $year;
        }    
        $totalYear = ($endYear - $startYear);  
         for($y = $startYear; $y <= $endYear; $y++) {
            $endmonth = ($y == $endYear) ? $endMonth : 12;                         
            $startmonth = ($y == $startYear) ? $startMonth : 01;                        
             if($totalYear > 2){                                                 
                $arrbetween = array(date('Y-01-01',strtotime('1-1-'.$y)),date('Y-12-31',strtotime('1-1-'.$y)));            
                DB::connection()->enableQueryLog();
                $preventivi = DB::table('quotes')
                ->selectRaw("sum(quotes.totale) as confirmamount")
                ->join('statipreventivi', 'quotes.id', '=', 'statipreventivi.id_preventivo')
                ->join('statiemotivipreventivi', 'statiemotivipreventivi.id', '=', 'statipreventivi.id_tipo')
                ->where(function($query) {
                    $query->where('quotes.user_id', '=', Auth::user()->id)
                        ->orWhere('quotes.idutente', '=', Auth::user()->id);
                })->where('statiemotivipreventivi.id', '8')
                ->whereBetween('statipreventivi.created_at',$arrbetween)
                ->where('quotes.is_deleted', 0)->first();                  
                 /*$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);                
                    exit;*/
                $notconfirm[] =  ($preventivi->confirmamount!=null)?$preventivi->confirmamount:0;              
          }
          else {
            for($i = $startmonth; $i <= $endmonth; $i++) {
       
            /*if($i < 10)
                $i = '0' . $i;
            $timestamp=strtotime('1-'.$i.'-'.$year);
             $arrbetween = ($year != 0) ? array(date('Y-m-01',$timestamp),date('Y-m-t',$timestamp)) : array(date('Y-m-d',strtotime($startDate)),date('Y-m-d',strtotime($endDate)));   */
             $timestamp = ($year != 0) ? strtotime('1-'.$i.'-'.$year) : strtotime('1-'.$i.'-'.$y);            
             $arrbetween = array(date('Y-m-01',$timestamp),date('Y-m-t',$timestamp)); 
           

            DB::connection()->enableQueryLog();
            $preventivi = DB::table('quotes')
            ->selectRaw("sum(quotes.totale) as confirmamount")
            ->join('statipreventivi', 'quotes.id', '=', 'statipreventivi.id_preventivo')
            ->join('statiemotivipreventivi', 'statiemotivipreventivi.id', '=', 'statipreventivi.id_tipo')
            ->where(function($query) {
                $query->where('quotes.user_id', '=', Auth::user()->id)
                    ->orWhere('quotes.idutente', '=', Auth::user()->id);
            })->where('statiemotivipreventivi.id', '8')
            ->whereBetween('statipreventivi.created_at',$arrbetween)
            ->where('quotes.is_deleted', 0)->first();                  
             /*$queries = DB::getQueryLog();
                $last_query = end($queries);
                print_r($last_query);                
                exit;*/
            $notconfirm[] =  ($preventivi->confirmamount!=null)?$preventivi->confirmamount:0;
          }
          }
        } 

       	 $total = array_sum($notconfirm);        
	     $lastrequired = array_reverse($notconfirm);
	     $lastExpens = array_slice($lastrequired,$lastmonth);
	     $lastExpens = array_sum($lastExpens);        
	     $total = ($total == 0) ? 1 : $total;
	     $percentChange = ($total == 0) ? 0 : ((1 - $lastExpens / $total) * 100);		 
		 return number_format($percentChange);            
    }

    function getprocessing($option) {
    	$optionalDetails = DB::table('optional')->where('code',$option)->orWhere('label',$option)->first(); 
    	$arr['processing'] = isset($optionalDetails->dipartimento) ? DB::table('lavorazioni')->where('departments_id', $optionalDetails->dipartimento)->get() : array();
    	$arr['currentprocessing'] = isset($optionalDetails->lavorazione) ? $optionalDetails->lavorazione : "";
    	return $arr;
    }