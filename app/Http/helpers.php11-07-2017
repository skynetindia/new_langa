<?php
	/* This day used for date add/minuser of particular day */
	$GLOBALS['datedays'] = 10;
	/*This function is used to store the log details of login user */
	function storelogs($userID,$logs){
		DB::table('member_activity_log')->insert(array(
					'user_id' => $userID,
					'logs' => $logs,
					'ip_address' => \Request::ip(),
					'log_date' => date('Y-m-d H:i:s') //

		));
	}

	function checkpermission($module, $sub_id, $read_write) {
		$user_id = Auth::user()->id;
		$user_permission = Auth::user()->permessi;
        $permission = json_decode($user_permission);

        if($user_id == 0){
        	return true;
        } else if($user_permission != "null" && $permission != null){
			$check = in_array($module.'|'.$sub_id.'|'.$read_write, $permission);
			if($check){
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}


	function getLocationInfoByIp($IPAddress = null){
		if($IPAddress == null){
			$client  = @$_SERVER['HTTP_CLIENT_IP'];
			$forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];
			$remote  = @$_SERVER['REMOTE_ADDR'];
			$result  = array('country'=>'', 'city'=>'');
			if(filter_var($client, FILTER_VALIDATE_IP)){
				$ip = $client;
			}elseif(filter_var($forward, FILTER_VALIDATE_IP)){
				$ip = $forward;
			}else{
				$ip = $remote;		
			}
			$IPAddress = $ip;
		}
		$ip_data = @json_decode(file_get_contents("http://www.geoplugin.net/json.gp?ip=".$IPAddress));    
		if($ip_data && $ip_data->geoplugin_countryName != null){
			$result['country_code'] = $ip_data->geoplugin_countryCode;
			$result['country'] = $ip_data->geoplugin_countryName;
			$result['city'] = $ip_data->geoplugin_city;
		}
		$result['country'] = !empty($result['country']) ? $result['country'] : 'italy';
		$result['city'] = !empty($result['city']) ? $result['city'] : 'milan';
		return @$result;	
	}	

	/* Here Create the unique function that used anywhere in site */
	function replace_charcter($replaceValue = array(),$content) {
		$htmlcontent = $content;
		foreach($replaceValue as $key => $val){
			$htmlcontent = str_replace($key,$val,$htmlcontent);	
		}
		return $htmlcontent;
		/*$htmlcontent = str_replace('[#SPLASHPAGE_TITLE#]',$memberdata->title,$memberdata->content);	
		echo $htmlcontent*/
	}

	function dateFormate($date,$formate = 'd/m/Y'){
		/*
		$date = str_replace('/', '-', $date);
		$formate = ($formate == null) ? $arrMainSettings['timeformate'] : $formate;*/
		$newDate = date($formate,strtotime($date));	
		return $newDate;
	}
	function wordformate($word){
		return ucwords(strtolower($word));
	}
	function stringformate($word){
		return ucfirst(strtolower($word));
	}

	/* This function is used to logo and that settings */
	function adminSettings() {
		  $arrSettings = DB::table('admin_settings')->first();
		  return $arrSettings;
	}
	

	/* This function is used to display breadcrumbs */
	function getbreadcrumbs() {
		$request = parse_url($_SERVER['REQUEST_URI']);
		$path = ($_SERVER['HTTP_HOST'] == 'localhost') ? rtrim(str_replace('/easylangaw/', '', $request["path"]), '/') : $request["path"];		
		$result = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');		

		$breadcrumbsArray = array();
		if(!empty($result)){
			$moduldetails = DB::select('select * from modulo where TRIM(BOTH "/" FROM modulo_link) = :link', ['link' => $result]);		
		}

		$parentid = isset($moduldetails[0]->modulo_sub) ? $moduldetails[0]->modulo_sub : null;
		$arrParentmodules[] = isset($moduldetails[0]->phase_key) ? $moduldetails[0]->phase_key : null;
		//$arrParentmodules = array();

		while($parentid != null){
			$parentwhere = array('id'=>$parentid);
			$parenmoduldetails = DB::table('modulo')->select('*')->where($parentwhere)->first();
			$arrParentmodules[] = $parenmoduldetails->phase_key;
			$parentid = $parenmoduldetails->modulo_sub;			
		}

		$breadcrumbs = "";
		$arrBreadcrumbsArray = $arrParentmodules;
		
		if(empty($arrParentmodules) || empty($arrParentmodules[0])) {			
			$arrBreadcrumbsArray = staticbreadcrumbs($path);		
		} 		

		if(!empty($arrBreadcrumbsArray)){			
			$breadcrumbs = "<ol class='breadcrumb'>";
			foreach(array_reverse($arrBreadcrumbsArray) as $key => $val){
				$breadcrumbs .= '<li class="breadcrumb-item">'.trans('messages.'.$val).'</li>'; 
			}
			$breadcrumbs .="</ol>";		
		}		
		return $breadcrumbs;
	}


	function staticbreadcrumbs($path) {

		$c = explode('/',$path);
		$last = explode('/', end($c));		

		$path = preg_replace('/[0-9]+/', '', $path);
		$key = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');							

		/*$arrBreadcrumbs['url_key'] = array('CHILD PAGE Language KEY','PAREND PAGE LANGUAGE');*/
		$arrBreadcrumbs['enti/modify/corporation'] = array('keyword_modify','keyword_entity');
		$arrBreadcrumbs['enti/add'] = array('keyword_add','keyword_entity');
		$arrBreadcrumbs['estimates/modify/quote'] = array('keyword_modify','keyword_quotes');
		$arrBreadcrumbs['estimates/add'] = array('keyword_add','keyword_quotes');
		$arrBreadcrumbs['progetti/modify/project'] = array('keyword_modify','keyword_projects');
		$arrBreadcrumbs['progetti/add'] = array('keyword_add','keyword_projects');
		$arrBreadcrumbs['pagamenti/mostra/accounting'] = array('keyword_invoices','keyword_groupings','keyword_accounting');
		$arrBreadcrumbs['pagamenti/tranche/add'] = array('keyword_add','keyword_invoices','keyword_accounting');
		$arrBreadcrumbs['pagamenti/tranche/modifica'] = array('keyword_modify','keyword_invoices','keyword_accounting');
		$arrBreadcrumbs['costi/modify'] = array('keyword_modify','keyword_costs','keyword_statistics');

		/* =================================================== Admin ===================================== */
		$arrBreadcrumbs['admin/modify/utente'] = array('keyword_add','keyword_users','keyword_role_capabilities');
		$arrBreadcrumbs['role-permessi'] = array('keyword_add','keyword_permission','keyword_role_capabilities');
		$arrBreadcrumbs['admin/tassonomie/pacchetti/add'] = array('keyword_add','keyword_packages','keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/tassonomie/modify/pacchetto'] = array('keyword_modify','keyword_packages','keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/taxonomies/optional/add'] = array('keyword_add','keyword_optional','keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/taxonomies/modify/optional'] = array('keyword_modify','keyword_optional','keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/tassonomie/dipartimenti/add'] = array('keyword_add','keyword_department','keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/tassonomie/dipartimenti/modify/department'] = array('keyword_modify','keyword_department','keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['taxation/add'] = array('keyword_add','keyword_taxation','keyword_sale','keyword_taxonomies');	
		$arrBreadcrumbs['admin/notification'] = array('keyword_add','keyword_notifications','keyword_notifications');	
		$arrBreadcrumbs['notification/detail'] = array('keyword_entelist','keyword_notifications','keyword_notifications');	
		$arrBreadcrumbs['admin/modify/quizpaackage'] = array('keyword_add','keyword_quiz_pacchetto','keyword_quiz');	
		$arrBreadcrumbs['admin/modify/language'] = array('keyword_add','keyword_languages','keyword_languages&phases','keyword_settings');	
		$arrBreadcrumbs['admin/add/languagetranslation'] = array('keyword_add','keyword_language_phase','keyword_languages&phases','keyword_settings');	
		$arrBreadcrumbs['menu/add'] = array('keyword_add','keyword_menu','keyword_settings');	
		$arrBreadcrumbs['menu/modify'] = array('keyword_modify','keyword_menu','keyword_settings');	
		
		/*Below for the same url for add/edit, so that check the edit url with numerics */
		if(is_numeric($last[0])){
			$arrBreadcrumbs['admin/modify/utente'] = array('keyword_modify','keyword_users','keyword_role_capabilities');
			$arrBreadcrumbs['role-permessi'] = array('keyword_modify','keyword_permission','keyword_role_capabilities');
			$arrBreadcrumbs['taxation/add'] = array('keyword_modify','keyword_taxation','keyword_sale','keyword_taxonomies');
			$arrBreadcrumbs['admin/notification'] = array('keyword_modify','keyword_notifications','keyword_notifications');	
			$arrBreadcrumbs['admin/modify/quizpaackage'] = array('keyword_modify','keyword_quiz_pacchetto','keyword_quiz');	
			$arrBreadcrumbs['admin/modify/language'] = array('keyword_modify','keyword_languages','keyword_languages&phases','keyword_settings');
			$arrBreadcrumbs['admin/languagetranslation'] = array('keyword_language_phase','keyword_languages&phases','keyword_settings');	
			$arrBreadcrumbs['admin/modify/languagetranslation'] = array('keyword_modify','keyword_language_phase','keyword_languages&phases','keyword_settings');	
		}
		return isset($arrBreadcrumbs[$key]) ? $arrBreadcrumbs[$key] : array();
	}
	
	/* This function is used to list of all module for dashboard drag and drop */
	function getModules() {
		DB::connection()->enableQueryLog();
		//$arrid = "'1', '2', '3', '4', '6', '9', '21', '27','67'";
		$arrid = "'1', '2', '3', '4','21'";	
		$arrModules = DB::select(DB::raw("select * from modulo where id NOT IN (select module_id from dashboard_widgets where user_type = ".Auth::user()->dipartimento.") AND id IN($arrid)"));
		/*$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);                
                    exit;
			$arrModules = DB::table('modulo')
					->select('modulo.*')					
					->Join('dashboard_widgets', 'dashboard_widgets.module_id', '=', 'modulo.id', 'left outer')
					->where(['modulo.type'=>1])->whereNull('dashboard_widgets.module_id')
					->where('dashboard_widgets.user_type', "!=", Auth::user()->dipartimento)->whereIn('modulo.id',$arrid)->get();
		*/			
		return $arrModules;
	}

	
	/* This function is used to Get the current widget base on login user type */
	function getWidgets() {
		$arrWidgets = DB::table('dashboard_widgets')->where('user_type',Auth::user()->dipartimento)->get();
		$arrModuleIds= array();
		foreach ($arrWidgets as $key => $value) {
			$arrModuleIds[] = $value->module_id;
		}
		return $arrModuleIds;
	}
	
	function ticketprobelm($role='client'){		
		$role = DB::table('ruolo_utente')->where('nome_ruolo', $role)->first();
		if( Auth::user()->dipartimento == $role->ruolo_id){
			return "<button class='btn btn-warning' type='button' id='problem' name='problem' title='".trans('messages.keyword_problem')."' onclick='problem()'>".trans('messages.keyword_problem')."</button>";
		} else {
			return false;
		}
	}
	function check_participant()
	{
		
		$participant=DB::table('enti_partecipanti')->where('id_user',Auth::user()->id)->get();
		$entiarr=[];
		foreach($participant as $partci){
			
			$entiarr[]=$partci->id_ente;
		}
		return $entiarr;
	}
	
	function check_media($id)
	{
		$imageurl=[1=>"projects", 3 =>"invoice", 0=>"quote", 4=>"quiz"];
		$filedetail=DB::table('media_files')->where('id',$id)->first();
		$social=DB::table('social')->get();
		$url=url('social/share/'.$id);
		$title=$filedetail->title;
		$description=$filedetail->description;
		$image_url=url('storage/app/images/'.$imageurl[$filedetail->master_type]."/".$filedetail->name);
		$newval=[];
		foreach($social as $soc)
		{
			$soc->url=str_replace('$url',"$url",$soc->url);
			$soc->url=str_replace('$title',"$title",$soc->url);
			$soc->url=str_replace('$description',"$description",$soc->url);
			$soc->url=str_replace('$image_url',"$image_url",$soc->url);
			$newval[]=$soc;
		}
		return $newval;
	}
	